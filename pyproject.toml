[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "rt"
description = "Python interface to Request Tracker API"
readme = "README.rst"
license = { text = "GNU General Public License v3 (GPLv3)" }
authors = [{ name = "Georges Toth", email = "georges.toth@govcert.etat.lu" }]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
  "Operating System :: POSIX",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3",
  "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">= 3.9"
dependencies = [
  "requests~=2.32",
  "httpx~=0.28",
]
dynamic = ["version"]

[project.urls]
Homepage = "https://github.com/python-rt/python-rt"
Documentation = "https://python-rt.readthedocs.io/"
Source = "https://github.com/python-rt/python-rt"
Tracker = "https://github.com/python-rt/python-rt/issues"
Changelog = "https://github.com/python-rt/python-rt/blob/master/CHANGELOG.md"

[dependency-groups]
docs = [
  "sphinx",
  "sphinx-autodoc-typehints",
  "sphinx-rtd-theme",
  "furo",
  "sphinx-copybutton",
]
dev = [
  "mypy",
  "ruff",
  "types-requests",
  "codespell",
  "bandit",
]
test = [
  "pytest~=8.3",
  "pytest-asyncio~=0.24",
  "coverage~=7.6",
]

[tool.hatch.envs.default]
installer = "uv"

[tool.hatch.build.targets.sdist]
include = [
  "/rt",
  "/tests",
]
exclude = []

[tool.hatch.version]
source = "vcs"

[tool.mypy]
show_error_codes = true
show_error_context = true
show_column_numbers = true
ignore_missing_imports = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
disallow_untyped_calls = false
warn_no_return = true
warn_redundant_casts = true
warn_unused_ignores = true
strict_optional = true
check_untyped_defs = false

files = [
  "rt/**/*.py"
]

[tool.pytest.ini_options]
minversion = "8.0"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"
testpaths = [
  "tests"
]

[tool.ruff]
line-length = 140
indent-width = 4
target-version = "py39"
include = ["pyproject.toml", "rt/**/*.py", "tests/**/*.py"]

[tool.ruff.lint]
select = [
  "E", # pycodestyle errors
  "W", # pycodestyle warnings
  "F", # pyflakes
  "I", # isort
  "C", # flake8-comprehensions
  "B", # flake8-bugbear
  "D", # pydocstyle
  "N", # pep8-naming
  "UP", # pyupgrade
  "YTT", # flake8-2020
  "ANN", # flake8-annotations
  "ASYNC", # flake8-async
  "S", # flake8-bandit
  "BLE", # flake8-blind-except
  "B", # flake8-bugbear
  "A", # flake8-builtins
  "COM", # flake8-commas
  "C4", # flake8-comprehensions
  "DTZ", # flake8-datetimez
  "EM103", # flake8-errmsg - dot-format-in-exception
  "EXE", # flake8-executable
  "ISC", # flake8-implicit-str-concat
  "ICN", # flake8-import-conventions
  "G", # flake8-logging-format
  "INP", # flake8-no-pep420
  "PIE", # flake8-pie
  "T20", # flake8-print
  "PYI", # flake8-pyi
  "RSE", # flake8-raise
  "RET", # flake8-return
  "SLF", # flake8-self
  "SLOT", # flake8-slots
  #    "SIM",  # flake8-simplify
  "TID", # flake8-tidy-imports
  "TCH", # flake8-type-checking
  "PTH", # flake8-use-pathlib
  "TD", # flake8-todos
  "FIX", # flake8-fixme
  "ERA", # eradicate
  "PL", # Pylint
  "PLC", # Convention
  "PLE", # Error
  "PLR", # Refactor
  "PLW", # Warning
  "B904", # reraise-no-cause
  "FLY", # flynt
  #    "PERF",  # Perflint
  "RUF013", # implicit-optional
]
unfixable = [
  'ERA001',
  'T201', # `print` found
]
extend-select = ['Q', 'RUF100', 'C90']
flake8-quotes = { inline-quotes = 'single', multiline-quotes = 'single' }
ignore = [
  "C901", # too complex
  "E501", # line too long
  "B008", # do not perform function call in argument defaults
  "ANN401", # any-type
  "ANN002", # missing-type-args
  "ANN003", # missing-type-kwargs
  "PLR0913", # Too many arguments to function call
  "PLR0915", # Too many statements
  "PLR2004", # Magic value used in comparison
  "PLW0603", # Using the global statement
  "PLR0912", # Too many branches
  "COM812", #	missing-trailing-comma
  "ISC001", # single-line-implicit-string-concatenation
  "Q001", # bad-quotes-multiline-string
  "RET504", # Unnecessary assignment before `return` statement
  "D401", # First line of docstring should be in imperative mood
  "D205", # 1 blank line required between summary line and description
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
  "ANN", # Missing return type annotation
  "D", # Missing docstring
  "ERA001", # Found commented-out code
]
"rt/rest1.py" = [
  "N803", # Argument name should be lowercase
]

[tool.ruff.format]
quote-style = "single"

[tool.ruff.lint.pydocstyle]
convention = "numpy"
